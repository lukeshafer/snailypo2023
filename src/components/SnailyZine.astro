---
import type { Zine } from "../data";
import { ZINE_WIDTH, ZINE_HEIGHT, ZINE_POSITIONS } from "@/constants";

interface Props {
	zine: Zine;
}

const { props } = Astro;

const reversed = props.zine.reversed ?? false;

const isRotated =
	props.zine.startsIn - 1 < ZINE_POSITIONS.length / 2 ? reversed : !reversed;
---

<snaily-zine reversed={String(reversed)} position={props.zine.startsIn} isRotated="false">
	<section
		aria-label={props.zine.name}
		class={`grid place-items-center gap-4 rounded-2xl bg-white py-8 px-12 w-[400px]`}>
		<h2 class="text-2xl text-center font-bold">{props.zine.name}</h2>
		<div class="flex gap-4">
			<button class="zine-btn zine-btn-prev">Prev</button>
			<button class="zine-btn zine-btn-next">Next</button>
		</div>
		<div
			class="flex flex-col items-center justify-center bg-center bg-no-repeat outline outline-2 zine-preview"
			style={{
				"background-image": `url(${props.zine.src})`,
				width: `${ZINE_WIDTH}px`,
				height: `${ZINE_HEIGHT}px`,
				"background-size": "400%",
				"background-position": ZINE_POSITIONS[props.zine.startsIn - 1],
				transform: isRotated ? "rotate(0.5turn)" : "rotate(0turn)",
			}}>
		</div>
	</section>
</snaily-zine>

<script>
	import { ZINE_POSITIONS } from "@/constants";
	import type { Zine } from "@/data";

	type Position = Zine["startsIn"];

	class SnailyZine extends HTMLElement {
		#reversed = false;
		#position = 1 as Position;
		#isRotated = false;
		preview!: HTMLDivElement;

		get isRotated() {
			return this.#position < ZINE_POSITIONS.length / 2
				? this.#reversed
				: !this.#reversed;
		}

		constructor() {
			super();
			this.preview = document.createElement("div");
		}

		connectedCallback() {
			this.#reversed = this.getAttribute("reversed") === "true";
			this.#position = (Number(this.getAttribute("startsIn")) - 1) as Position;

			const prevBtn = this.querySelector(
				".zine-btn-prev"
			)! as HTMLButtonElement;
			const nextBtn = this.querySelector(
				".zine-btn-next"
			)! as HTMLButtonElement;
			this.preview = this.querySelector(".zine-preview")! as HTMLDivElement;

			prevBtn.addEventListener("click", () => {
				this.prev();
			});

			nextBtn.addEventListener("click", () => {
				this.next();
			});
		}

		static get observedAttributes() {
			return ["isRotated", "position"] as const;
		}

		attributeChangedCallback(
			name: "isRotated" | "position",
			_: string,
			newValue: string
		) {
			console.log(name, newValue);
			if (name === "isRotated") {
				this.#isRotated = newValue === "true";
				this.preview.style.transform = this.#isRotated
					? "rotate(0.5turn)"
					: "rotate(0turn)";
			} else if (name === "position") {
				this.#position = Number(newValue) as Position;
				this.preview.style.backgroundPosition = ZINE_POSITIONS[this.#position];
			}
		}

		prev() {
			const newPosition =
				(this.#position - 1 + ZINE_POSITIONS.length) % ZINE_POSITIONS.length;
			this.setAttribute("position", String(newPosition));
		}

		next() {
			const newPosition = (this.#position + 1) % ZINE_POSITIONS.length;
			this.setAttribute("position", String(newPosition));
			this.setAttribute(
				"isRotated",
				String(
					newPosition < ZINE_POSITIONS.length / 2
						? this.#reversed
						: !this.#reversed
				)
			);
		}
	}

	customElements.define("snaily-zine", SnailyZine);
</script>
